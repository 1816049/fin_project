<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="wh_partner">
	
	<!-- 로그인 처리  --> 
	<select id="getLoginHost" parameterType="HashMap" resultType="com.spring.app.expedia.domain.HostVO">
		select h_userid, h_pw, h_name, h_lodgename, h_email, h_mobile, h_postcode, h_address, h_detailAddress,
               h_extraAddress, to_char(h_registerDate, 'yyyy-mm-dd') AS h_registerday,
               trunc(months_between(sysdate, h_lastpwdchangedate)) AS h_pwdchangegap,
               h_legalName, h_businessNo, h_status
		from tbl_host
		where h_userid = #{h_userid} and h_pw = #{h_pw}
	</select>
	
	
	<select id="idDuplicateCheck" parameterType="String" resultType="int">
		select count(*)
		from tbl_host
		where h_userid = #{userid}
	</select>
	
	
	<!-- tbl_host 에 HostVO 에 저장된 정보를 insert 해주는 메소드 --> 
	<insert id="registerHost" parameterType="com.spring.app.expedia.domain.HostVO">
		insert into tbl_host(h_userid, h_pw, h_name, h_lodgename, h_email, h_mobile, h_postcode, h_address, h_detailAddress, h_extraAddress, h_registerDate, h_lastpwdchangedate, h_status, h_legalName, h_businessNo)
		values(#{h_userid}, #{h_pw}, #{h_name}, #{h_lodgename}, #{h_email}, #{h_mobile}, #{h_postcode}, #{h_address}, #{h_detailAddress}, #{h_extraAddress}, default, default, default, #{h_legalName}, #{h_businessNo})
	</insert>
	
	
	<!-- === 월별 객실등급별 예약 인원 수 가져오기 === -->
	<resultMap type="HashMap" id="useLodgeCnt_Map">
		<result column="rm_type" 		property="rm_type" javaType="String"/>
		<result column="MON01" 			property="MON01" 	   javaType="String"/>
		<result column="MON02" 			property="MON02" 	   javaType="String"/>
		<result column="MON03" 			property="MON03" 	   javaType="String"/>
		<result column="MON04" 			property="MON04" 	   javaType="String"/>
		<result column="MON05" 			property="MON05" 	   javaType="String"/>
		<result column="MON06" 			property="MON06" 	   javaType="String"/>
		<result column="MON07" 			property="MON07" 	   javaType="String"/>
		<result column="MON08" 			property="MON08" 	   javaType="String"/>
		<result column="MON09" 			property="MON09" 	   javaType="String"/>
		<result column="MON10" 			property="MON10" 	   javaType="String"/>
		<result column="MON11" 			property="MON11" 	   javaType="String"/>
		<result column="MON12" 			property="MON12" 	   javaType="String"/>
	</resultMap>
	<select id="useLodgeCnt" parameterType="HashMap"  resultMap="useLodgeCnt_Map">
		select rm_type
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '01', 1, 0) ) AS MON01
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '02', 1, 0) ) AS MON02
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '03', 1, 0) ) AS MON03
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '04', 1, 0) ) AS MON04
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '05', 1, 0) ) AS MON05
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '06', 1, 0) ) AS MON06
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '07', 1, 0) ) AS MON07
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '08', 1, 0) ) AS MON08
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '09', 1, 0) ) AS MON09
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '10', 1, 0) ) AS MON10
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '11', 1, 0) ) AS MON11
		     , SUM( decode( to_char(rs_checkindate, 'mm'), '12', 1, 0) ) AS MON12 
		FROM 
		(
		    SELECT *     
		    FROM tbl_room RM LEFT JOIN tbl_reservation RS  
		    ON RM.rm_seq = RS.fk_rm_seq  
		    LEFT JOIN tbl_lodge L
		    ON RS.fk_h_userid = L.fk_h_userid   
		    WHERE to_char(rs_checkindate, 'yyyy') = to_char( add_months(sysdate, -12*(to_number(to_char(sysdate,'yyyy')) - to_number(#{year}) )  ) , 'yyyy')
		    AND RS.fk_h_userid = #{h_userid}
		    UNION ALL 
		    SELECT *     
		    FROM tbl_room RM LEFT JOIN tbl_reservation RS  
		    ON RM.rm_seq = RS.fk_rm_seq  
		    LEFT JOIN tbl_lodge L
		    ON RM.fk_lodge_id = L.lodge_id 
		    WHERE RS.rs_date IS NULL
		    AND L.fk_h_userid = #{h_userid}
		) V
		GROUP BY rm_type
	</select>
	
	
	<!-- tbl_host 에 저장된 판매자의 정보를 update 해주는 메소드 -->
	<update id="editHost" parameterType="HashMap">
		update tbl_host set h_pw = #{pw}, h_name = #{name}, h_lodgename = #{lodgename}, h_email = #{email}, h_mobile = #{mobile}
                  , h_postcode = #{postcode}, h_address = #{address}, h_detailAddress = #{detailAddress}, h_extraAddress = #{extraAddress}
                  , h_legalName = #{legalName}, h_businessNo = #{businessNo}
		where h_userid = #{userid} 
	</update>
	
	
	
	
	<!-- 현재 로그인되어있는 회원(구매자)의 채팅방 목록 가져오기  -->
	
	<select id="getChatRoomList" parameterType="HashMap" resultType="com.spring.app.expedia.domain.ChatVO"> 
	select A.chat_no, A.fk_userid, A.fk_lodge_id, A.chat_date, A.lg_name, A.lg_en_name, V.lg_img_save_name
	from
	(select * from tbl_chat C join tbl_lodge L
	 on C.fk_lodge_id = L.lodge_id
	 where fk_userid = #{userid}) A
	join 
	(select fk_lodge_id, lg_img_save_name from tbl_lg_img where lg_img_seq = 
	    (select min(lg_img_seq) as lg_img_seq 
	     from 
	        (select lg_img_seq, fk_lodge_id, lg_img_save_name, lg_img_name 
	        from tbl_lg_img 
	        where fk_lodge_id = #{lodgeId}) 
	        group by fk_lodge_id )
	    ) V
	on A.fk_lodge_id = V.fk_lodge_id
	</select>
	
	<!-- 로그인한 유저의 예약한 lodge_id 리스트 가져오기 -->
	<select id="selectLodgeIdList" parameterType="String" resultType="String">
	select fk_lodge_id 
	from tbl_chat 
	where fk_userid = #{userid}
	</select>
	
	
	
	
	<!-- 총 채팅방 갯수(totalChatRoomCount) 가져오기  -->
	<select id="getTotalChatRoomCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_chat
		where fk_userid = #{userid}
	</select> 
	
	
	<!-- 채팅방 불러오기(구매자) -->
	<select id="selectChat" parameterType="HashMap" resultType="com.spring.app.expedia.domain.ChatVO">
		select chat_no, fk_userid, fk_lodge_id ,chat_date
		from tbl_chat
		where fk_lodge_id = #{fk_lodge_id} and fk_userid = #{fk_userid}
	</select>  
	
	<!-- 사업장명 을 알아오기(구매자 입장의 채팅방에서 사업장명 쓰기 위함) -->
	<select id="selectH_name" parameterType="String" resultType="String">
		select H.h_lodgename
	    from tbl_host H
	    join tbl_lodge L
	    on H.h_userid = L.fk_h_userid
	    where L.lodge_id = #{fk_lodge_id}
	</select>
	
	
	<!-- 기존 채팅방이 없는 경우 새로운 채팅방을 만들기 -->
	<insert id="createChat" parameterType="HashMap">
		insert into tbl_chat(chat_no, fk_userid, fk_lodge_id, chat_date)
		values (seq_tbl_chat.nextval, #{fk_userid}, #{fk_lodge_id}, default)
	</insert>
	
	
	<!-- 채팅쓰기(tbl_reply 테이블에 insert) -->
	<insert id="addChat" parameterType="HashMap" >
	     insert into tbl_reply(reply_no, reply_comment, reply_date, fk_chat_no, r_status)
	     values(seq_tbl_reply.nextval, #{chat_comment}, default, #{chat_no}, 0)
	</insert>
	
	<!-- 채팅들을 페이징 처리해서 조회해오기 -->
	<select id="getChatList" parameterType="HashMap" resultType="com.spring.app.expedia.domain.ReplyVO"> 
		select row_number() over(order by reply_date asc) AS rno
		     , reply_no, reply_comment, to_char(reply_date, 'yyyy-mm-dd hh24:mi') AS reply_date
		     , fk_chat_no, r_status 
		from tbl_reply
		where fk_chat_no = #{fk_chat_no}
	</select>
	
	
	
	
	<!-- 판매자의 lodge_id 알아오기 -->
	<select id="selectLodgeID" parameterType="String" resultType="String">
		select lodge_id
	    from tbl_lodge
	    where fk_h_userid = #{h_userid}	
	</select>
	
	
	<!-- 판매자 총 채팅방 갯수(totalHostChatRoomCount) 가져오기  -->
	<select id="getTotalHostChatRoomCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_chat
		where fk_lodge_id = #{lodge_id}
	</select> 
	
	
	<!-- 현재 로그인되어있는 사업자(판매자)의 채팅방 목록 가져오기  -->	
	<select id="getHostChatRoomList" parameterType="HashMap" resultType="com.spring.app.expedia.domain.ChatVO"> 
		SELECT chat_no, fk_userid, fk_lodge_id ,chat_date, name
		FROM 
		(
		 select row_number() over(order by chat_date desc) AS rno 
		      , chat_no, fk_userid, fk_lodge_id
		 	  , to_char(chat_date, 'yyyy-mm-dd hh24:mi') AS chat_date
              , U.name
		 from tbl_chat C 
         join tbl_user U
         on U.userid = C.fk_userid
		 where fk_lodge_id = #{lodge_id}
		) V 
		WHERE rno between #{startRno} and #{endRno}
	
	
	</select>
	
	
	<!-- 채팅방 불러오기(판매자) --> 
	<select id="selectHostChat" parameterType="HashMap" resultType="com.spring.app.expedia.domain.ChatVO">
		select chat_no, fk_userid, fk_lodge_id ,chat_date
		from tbl_chat
		where fk_lodge_id = #{lodge_id} and fk_userid = #{fk_userid}
	</select>
	
	<!-- 채팅쓰기(판매자) -->
	<insert id="addHostChat" parameterType="HashMap" >
	     insert into tbl_reply(reply_no, reply_comment, reply_date, fk_chat_no, r_status)
	     values(seq_tbl_reply.nextval, #{hostChat_comment}, default, #{chat_no}, 1)
	</insert>
	
	<!-- 채팅들을 페이징 처리해서 조회해오기 (판매자) -->
	<select id="getHostChatList" parameterType="HashMap" resultType="com.spring.app.expedia.domain.ReplyVO"> 
		select row_number() over(order by reply_date asc) AS rno
		     , reply_no, reply_comment, to_char(reply_date, 'yyyy-mm-dd hh24:mi') AS reply_date
		     , fk_chat_no, r_status 
		from tbl_reply
		where fk_chat_no = #{fk_chat_no}
	</select>
	
	<!-- 예약자 이름을 알아오기(판매자 입장의 채팅방에서 예약자명 쓰기 위함) -->
	<select id="selectName" parameterType="String" resultType="String">
		select name
	    from tbl_user
	    where userid = #{fk_userid}	
	</select>
	
	
	
	
</mapper>
