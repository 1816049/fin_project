<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="mj_comment">

	<!-- 글목록  -->	
		<resultMap type="HashMap" id="getList_Map">
	   <result property="H_LODGENAME" 		column="H_LODGENAME" 			javaType="String" />
	   <result property="RV_CONTENT" 		column="RV_CONTENT" 			    javaType="String" />
	   <result property="RV_REGDATE" 		column="RV_REGDATE" 		        javaType="String" />
	   <result property="RV_ORG_SEQ" 		column="RV_ORG_SEQ" 		        javaType="Integer" />
	   <result property="RV_DEPTHNO" 		column="RV_DEPTHNO" 		        javaType="Integer" />
	   <result property="FK_RV_RATING" 		column="FK_RV_RATING" 		        javaType="Integer" />
	   <result property="RV_RATING_DESC" 	column="RV_RATING_DESC" 	        javaType="String" />
	   <result property="livedate" 		    column="livedate" 		            javaType="String" />
	   <result property="FK_LODGE_ID" 		column="FK_LODGE_ID" 		            javaType="String" />
	   <result property="LG_NAME" 		column="LG_NAME" 		            javaType="String" />
	   <result property="RV_GROUPNO" 		column="RV_GROUPNO" 		            javaType="Integer" />
	   <result property="FK_RS_SEQ" 		column="FK_RS_SEQ" 		            javaType="String" />
	   <result property="RV_SEQ" 		column="RV_SEQ" 		            javaType="String" />
	   <result property="H_USERID" 		column="H_USERID" 		            javaType="String" />
	</resultMap>
<select id="selectReview" parameterType="HashMap" resultMap="getList_Map">

 SELECT * FROM (
		 SELECT rownum AS RNO, V.RV_SEQ, V.FK_LODGE_ID, LG_NAME, V.FK_RS_SEQ, V.FK_USERID, R.RS_NAME, V.RV_SUBJECT, V.RV_CONTENT
		     , TO_CHAR(V.rv_regdate, 'yyyy"년" mm"월" dd"일"') AS RV_REGDATE, V.RV_STATUS, V.RV_GROUPNO, V.RV_ORG_SEQ, V.RV_DEPTHNO
		     , V.FK_RV_RATING, T.RV_RATING_DESC, H.H_USERID
		     , (TO_DATE(R.rs_checkoutdate, 'YYYY-MM-DD') - TO_DATE(R.rs_checkindate, 'YYYY-MM-DD'))||'박' AS livedate, H.H_LODGENAME
		FROM
		(
		select RV_SEQ,FK_LODGE_ID, LG_NAME, FK_RS_SEQ, FK_USERID, RV_SUBJECT, RV_CONTENT, RV_REGDATE, RV_STATUS,  RV_GROUPNO, RV_ORG_SEQ, RV_DEPTHNO, FK_RV_RATING
		from tbl_review V join tbl_lodge L on V.fk_lodge_id = L.lodge_id
		union all 
		select C_SEQ, FK_LODGE_ID, LG_NAME, FK_RS_SEQ, C.FK_H_USERID, C_SUBJECT, C_CONTENT, C_REGDATE, C_STATUS, C_GROUPNO, C_ORG_SEQ, C_DEPTHNO, FK_C_RATING
		from tbl_comment C join tbl_lodge E on C.fk_lodge_id = E.lodge_id
		) V
		left join tbl_reservation R ON R.RS_SEQ = V.FK_RS_SEQ
		left join tbl_host H ON H.h_userid = V.fk_userid
		left join tbl_rating T ON T.RV_RATING = V.FK_RV_RATING     
		where RV_STATUS = 1 
		<if test="lodgeIdList.size() > 0">
			and V.FK_LODGE_ID in (
			<foreach item="item" collection="lodgeIdList" separator=","  >
				#{item}
			</foreach>
			)
		</if>
	
		<choose>
			<when test='searchWord != ""'>
				and lower(V.RV_CONTENT) like '%'||lower(#{searchWord})||'%'
			</when>
			
			<otherwise>
			</otherwise>
		</choose>
		start with RV_ORG_SEQ = 0 
		connect by prior RV_SEQ = RV_ORG_SEQ 
		order siblings by RV_GROUPNO desc
 ) WHERE RNO BETWEEN #{startRno} and #{endRno}
</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- insert 한 주소에 글목록 뿌려주기  -->	
	<resultMap type="HashMap" id="getList_Map_2">
	   <result property="H_LODGENAME" 		column="H_LODGENAME" 			javaType="String" />
	   <result property="RV_CONTENT" 		column="RV_CONTENT" 			    javaType="String" />
	   <result property="RV_REGDATE" 		column="RV_REGDATE" 		        javaType="String" />
	   <result property="RV_ORG_SEQ" 		column="RV_ORG_SEQ" 		        javaType="Integer" />
	   <result property="RV_DEPTHNO" 		column="RV_DEPTHNO" 		        javaType="Integer" />
	   <result property="FK_RV_RATING" 		column="FK_RV_RATING" 		        javaType="Integer" />
	   <result property="RV_RATING_DESC" 	column="RV_RATING_DESC" 	        javaType="String" />
	   <result property="livedate" 		    column="livedate" 		            javaType="String" />
	   <result property="FK_LODGE_ID" 		column="FK_LODGE_ID" 		            javaType="String" />
	   <result property="LG_NAME" 		column="LG_NAME" 		            javaType="String" />
	   <result property="RV_GROUPNO" 		column="RV_GROUPNO" 		            javaType="Integer" />
	   <result property="FK_RS_SEQ" 		column="FK_RS_SEQ" 		            javaType="String" />
	   <result property="RV_SEQ" 		column="RV_SEQ" 		            javaType="String" />
	   <result property="H_USERID" 		column="H_USERID" 		            javaType="String" />
	</resultMap>
<select id="selectView" resultMap="getList_Map_2">


		 SELECT V.RV_SEQ, V.FK_LODGE_ID, LG_NAME, V.FK_RS_SEQ, V.FK_USERID, R.RS_NAME, V.RV_SUBJECT, V.RV_CONTENT
		     , TO_CHAR(V.rv_regdate, 'yyyy"년" mm"월" dd"일"') AS RV_REGDATE, V.RV_STATUS, V.RV_GROUPNO, V.RV_ORG_SEQ, V.RV_DEPTHNO
		     , V.FK_RV_RATING, T.RV_RATING_DESC, H.H_USERID
		     , (TO_DATE(R.rs_checkoutdate, 'YYYY-MM-DD') - TO_DATE(R.rs_checkindate, 'YYYY-MM-DD'))||'박' AS livedate, H.H_LODGENAME
		FROM
		(
		select RV_SEQ,FK_LODGE_ID, LG_NAME, FK_RS_SEQ, FK_USERID, RV_SUBJECT, RV_CONTENT, RV_REGDATE, RV_STATUS,  RV_GROUPNO, RV_ORG_SEQ, RV_DEPTHNO, FK_RV_RATING
		from tbl_review V join tbl_lodge L on V.fk_lodge_id = L.lodge_id
		union all 
		select C_SEQ, FK_LODGE_ID, LG_NAME, FK_RS_SEQ, C.FK_H_USERID, C_SUBJECT, C_CONTENT, C_REGDATE, C_STATUS, C_GROUPNO, C_ORG_SEQ, C_DEPTHNO, FK_C_RATING
		from tbl_comment C join tbl_lodge E on C.fk_lodge_id = E.lodge_id
		) V
		left join tbl_reservation R ON R.RS_SEQ = V.FK_RS_SEQ
		left join tbl_host H ON H.h_userid = V.fk_userid
		left join tbl_rating T ON T.RV_RATING = V.FK_RV_RATING     
		where RV_STATUS = 1
		start with RV_ORG_SEQ = 0 
		connect by prior RV_SEQ = RV_ORG_SEQ 
		order siblings by RV_GROUPNO desc
    
</select>
	
	
	<!-- 답변 달아주기  -->
 	<insert id="commentInsert" parameterType="HashMap">
		insert into tbl_comment(C_SEQ, FK_LODGE_ID, FK_RS_SEQ, FK_H_USERID, C_CONTENT, C_REGDATE, C_STATUS,C_GROUPNO,C_ORG_SEQ,C_DEPTHNO,FK_C_RATING ) values(seq_tbl_review.nextval,#{fk_lodge_id},#{fk_rs_seq}, #{fk_h_userid},'답변: '||#{c_content},  default,default,#{c_groupno} ,#{c_org_seq}, #{c_depthno}+1, default) 
	</insert> 
	
	<!-- 답변 수정해주기 -->
	<update id="changeComment">
		   update tbl_comment set c_content = '답변: '||#{c_content}
                          ,c_regdate = default
                       where c_seq = #{c_seq}
	</update>
	
	<!-- 삭제하기  -->
	<delete id="deleteComment" parameterType="String">
		delete from tbl_comment
		 where c_seq = #{c_seq}
	</delete>
	
	
	
	
	<!-- 사업자아이디랑 숙박시설 비교하는 것  -->
	<select id="selectLodgeIdList" parameterType="String" resultType="String">
		select LODGE_ID
		from tbl_lodge 
		where FK_H_USERID = #{userId}
	</select>
	



	<select id="getTotalCount" parameterType="HashMap" resultType="int">
	 select count(*)
      from tbl_review
      where RV_status = 1
       	<choose>
			<when test='searchWord != ""'>
				and lower(RV_CONTENT) like '%'||lower(#{searchWord})||'%'
			</when>
			
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<!--  평점 별 후기 갯수 가져오기  -->
	<select id="getRvcntByRate" parameterType="HashMap" resultType="HashMap">
      select two, four, six, eight, ten
      from
      (
          select fk_lodge_id, fk_rv_rating
          from tbl_review
          where fk_lodge_id=#{lodge_id}
      )
      pivot(
          count(fk_rv_rating) for fk_rv_rating in(2 as two, 4 as four, 6 as six , 8 as eight, 10 as ten)
      )
   </select>
   
   <!-- 구매자 총 갯수  -->
   <select id="gettotalByRate" parameterType="HashMap" resultType="int">
				select count(*) as cnt
				from tbl_review
				where  fk_lodge_id = #{lodge_id}
		   
   
   </select>
	
   <!-- 판매자 총 갯수  -->
   <select id="gettotalComment" parameterType="HashMap" resultType="int">
				select count(*) as commentcnt
				from tbl_comment
				where  fk_lodge_id = #{lodge_id}
		   
   
   </select>
	


</mapper>